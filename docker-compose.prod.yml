# JobBot Business Intelligence Engine - Production Deployment
# Docker Compose configuration for production environment with security and scaling

version: '3.8'

services:
  # ========================================
  # Reverse Proxy & Load Balancer
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: jobbot-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - jobbot-network
      - external-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Database Services
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: jobbot-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jobbot_prod}
      POSTGRES_USER: ${POSTGRES_USER:-jobbot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/prod-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jobbot-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jobbot_user} -d ${POSTGRES_DB:-jobbot_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Security: Don't expose PostgreSQL port to host in production
    # ports:
    #   - "5432:5432"

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: jobbot-redis-prod
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - jobbot-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    # Security: Don't expose Redis port to host in production
    # ports:
    #   - "6379:6379"

  # ========================================
  # Application Services
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-3.0.0}
    container_name: jobbot-backend-prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-jobbot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-jobbot_prod}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - WORKERS=${BACKEND_WORKERS:-4}
    volumes:
      - backend_logs:/app/logs
      - backend_storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jobbot-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # React Dashboard Frontend
  frontend:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-3.0.0}
    container_name: jobbot-frontend-prod
    networks:
      - jobbot-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # ========================================
  # Background Services
  # ========================================
  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jobbot-celery-worker-prod
    command: celery -A app.services.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-jobbot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-jobbot_prod}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - backend_logs:/app/logs
      - backend_storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jobbot-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: jobbot-celery-beat-prod
    command: celery -A app.services.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-jobbot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-jobbot_prod}
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - backend_logs:/app/logs
      - celery_beat_data:/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jobbot-network
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ========================================
  # Monitoring & Logging
  # ========================================
  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: jobbot-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - jobbot-network
    restart: always

  # Log collection
  promtail:
    image: grafana/promtail:latest
    container_name: jobbot-promtail-prod
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - backend_logs:/var/log/backend:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - jobbot-network
    restart: always

  # Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: jobbot-prometheus-prod
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - jobbot-network
    restart: always

  # Metrics visualization and alerting
  grafana:
    image: grafana/grafana:latest
    container_name: jobbot-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SMTP_ENABLED: ${GRAFANA_SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${GRAFANA_SMTP_HOST}
      GF_SMTP_USER: ${GRAFANA_SMTP_USER}
      GF_SMTP_PASSWORD: ${GRAFANA_SMTP_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources-prod.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
      - loki
    networks:
      - jobbot-network
    restart: always

  # ========================================
  # Backup Services
  # ========================================
  # Database backup service
  db-backup:
    image: postgres:15-alpine
    container_name: jobbot-db-backup-prod
    environment:
      PGUSER: ${POSTGRES_USER:-jobbot_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-jobbot_prod}
      PGHOST: postgres
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup-db.sh:/backup-db.sh:ro
    depends_on:
      - postgres
    networks:
      - jobbot-network
    command: ["sh", "-c", "while true; do sleep 86400; /backup-db.sh; done"]
    restart: always

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  backend_storage:
    driver: local
  nginx_logs:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# ========================================
# Networks
# ========================================
networks:
  jobbot-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16
  external-network:
    driver: bridge

# ========================================
# Production Deployment Notes
# ========================================
# Environment Variables Required:
# - POSTGRES_PASSWORD: Strong password for PostgreSQL
# - SECRET_KEY: Application secret key (generate with: openssl rand -hex 32)
# - GRAFANA_ADMIN_PASSWORD: Admin password for Grafana
# - BUILD_DATE: Build timestamp
# - VCS_REF: Git commit hash
# - VERSION: Application version
#
# Optional Environment Variables:
# - LOG_LEVEL: Logging level (default: INFO)
# - BACKEND_WORKERS: Number of backend workers (default: 4)
# - GRAFANA_DOMAIN: Domain for Grafana (default: localhost)
# - GRAFANA_SMTP_*: SMTP configuration for Grafana alerts
#
# Deployment Commands:
#   docker-compose -f docker-compose.prod.yml up -d
#   docker-compose -f docker-compose.prod.yml logs -f
#   docker-compose -f docker-compose.prod.yml down
#
# SSL Certificate Setup:
#   Place SSL certificates in ./ssl/ directory
#   Update nginx configuration to reference certificates
#
# Backup and Restore:
#   Automatic daily backups to postgres_backups volume
#   Manual backup: docker-compose -f docker-compose.prod.yml exec postgres pg_dump
#   Restore: docker-compose -f docker-compose.prod.yml exec postgres psql