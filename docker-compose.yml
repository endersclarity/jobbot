# JobBot Business Intelligence Engine - Development Environment
# Docker Compose configuration for local development with all services

version: '3.8'

services:
  # ========================================
  # Database Services
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: jobbot-postgres-dev
    environment:
      POSTGRES_DB: jobbot_dev
      POSTGRES_USER: jobbot_user
      POSTGRES_PASSWORD: jobbot_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-dev-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobbot_user -d jobbot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jobbot-network

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: jobbot-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - jobbot-network

  # ========================================
  # Application Services
  # ========================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: jobbot-backend-dev
    environment:
      - DATABASE_URL=postgresql://jobbot_user:jobbot_dev_password@postgres:5432/jobbot_dev
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - API_HOST=0.0.0.0
      - API_PORT=8000
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    volumes:
      - .:/app
      - /app/venv  # Prevent mounting over virtual environment
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - jobbot-network
    restart: unless-stopped

  # React Dashboard Frontend
  frontend:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
      target: development
    container_name: jobbot-frontend-dev
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - NODE_ENV=development
    ports:
      - "5173:5173"
    volumes:
      - ./dashboard:/app
      - /app/node_modules  # Prevent mounting over node_modules
    depends_on:
      - backend
    networks:
      - jobbot-network
    restart: unless-stopped

  # ========================================
  # Development Tools
  # ========================================
  # Database Administration Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: jobbot-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@jobbot.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - jobbot-network
    profiles:
      - tools

  # Redis Administration Tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: jobbot-redis-commander-dev
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - jobbot-network
    profiles:
      - tools

  # ========================================
  # Monitoring Services
  # ========================================
  # Application monitoring (development)
  prometheus:
    image: prom/prometheus:latest
    container_name: jobbot-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - jobbot-network
    profiles:
      - monitoring

  # Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: jobbot-grafana-dev
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    networks:
      - jobbot-network
    profiles:
      - monitoring

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ========================================
# Networks
# ========================================
networks:
  jobbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ========================================
# Development Commands
# ========================================
# Usage:
#   Development:     docker-compose up
#   With tools:      docker-compose --profile tools up
#   With monitoring: docker-compose --profile monitoring up
#   Full stack:      docker-compose --profile tools --profile monitoring up
#   
#   Services:
#   - Backend API:     http://localhost:8000
#   - Frontend:        http://localhost:5173  
#   - API Docs:        http://localhost:8000/docs
#   - PgAdmin:         http://localhost:5050 (with --profile tools)
#   - Redis Commander: http://localhost:8081 (with --profile tools)
#   - Prometheus:      http://localhost:9090 (with --profile monitoring)
#   - Grafana:         http://localhost:3000 (with --profile monitoring)